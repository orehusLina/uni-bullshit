// 6. –î–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–π—Ç–∏ —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫—Ä–∞—Ç–Ω—ã—Ö ùëã. –í—ã–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç. –í—Å–µ —á–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π.
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
int X; // –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–∏–∫–∞—Ç–∞
bool neKratnoX(int n) {  //—Ñ—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —á–∏—Å–ª–∞ –Ω–µ –∫—Ä–∞—Ç–Ω—ã–µ –•
    return n%X!=0;
}
bool even(int n) { // —Ñ—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
    return n%2==0;
}
using namespace std;
int main() {
    cout << "n = ";
    int n; cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {  // –≤–≤–æ–¥ –≤–µ–∫—Ç–æ—Ä–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        cout << "a[" << i << "] = ";
        cin >> a[i];
    }
    cout <<"X = "; cin >> X;
    vector<int> temp(a); // –∫–æ–ø–∏—è –≤–µ–∫—Ç–æ—Ä–∞ –∞
    replace_if(temp.begin(), temp.end(), neKratnoX, 0); //–∑–∞–º–µ–Ω–∞ –Ω–µ–∫—Ä–∞—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –Ω–∞ –Ω—É–ª–∏ (–≤ –∫–æ–ø–∏–∏ –≤–µ–∫—Ç–æ—Ä–∞)
    cout << "Sum of elements, divisible by X = ";
    cout << accumulate(temp.begin(), temp.end(), 0) << '\n'; //—Å—É–º–º–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–µ —Ä–∞–≤–Ω—ã—Ö –Ω—É–ª—é
    cout << "Min element = " << *min_element(a.begin(), a.end()) << '\n'; // –≤—ã–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    int maxim = *max_element(a.begin(), a.end()); 
    replace_if(a.begin(), a.end(), even, maxim); // –∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö —á–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º
    cout << "All even elements, replaced with the maximal one:" << '\n';
    for (int c : a) cout << c << ' ';
}